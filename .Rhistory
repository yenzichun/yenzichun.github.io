ed
wd
gwd
gwd()
getwd
getwd()
setwd("C:/R_workspace")
setwd("C:/R_workspace")
setwd("C:/R_workspace")
devtools::install_github("hadley/lubridate")         # brocks reqs dev version
install.packages(c("knitr", "servr", "devtools"))
install.packages(c("knitr", "servr", "devtools"))
devtools::install_github("hadley/lubridate")         # brocks reqs dev version
devtools::install_github("hadley/lubridate")         # brocks reqs dev version
install.packages
install.packages("Rtools")
devtools::install_github("brendan-r/brocks")
library(brocks)
new_post("My first blog post!")
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("jekyll")
library(servr)
jekyll()
jekyll()
servr::jekyll()
setwd("C:/R_workspace")
blog_serve()
library(brocks)
blog_serve()
blog_push()
library(brocks)
new_post("Second Post")
Sys.getenv('USER')
cat("hello world!")
blog_serve()
blog_push()
blog_serve()
blog_push()
blog_serve()
library("DT")
datatable
datatable()
blog_serve()
blog_serve()
blog_serve()
blog_serve()
blog_serve()
blog_serve()
blog_opts("prompt")
opts_chunk$get("prompt")
library(knitr)
opts_chunk$get("prompt")
setwd("C:/R_workspace")
setwd("C:/R_workspace")
load("C:/R_workspace/.RData")
library(brocks)
new_post("dashboard test")
install.packages("igraph")
library(rsconnect)
deployApp("C:/Github/ems_case")
deployApp("C:/Github/ems_case")
library("dplyr", lib.loc="C:/R/R-3.3.1/library")
library("dplyr")
library("ggplot2")
library("tidyr")
library("flexdashboard")
library("highcharter")
library("shiny")
deployApp("C:/Github/ems_case")
library(brocks)
new_post("shiny and highcharts")
blog_serve()
library(rsconnect)
deployApp("C:/Github/ems_case")
deployApp("C:/Github/ems_case")
library(highcharter)
deployApp("C:/Github/ems_case")
shiny::runApp('C:/Github/ems_case')
library("shiny")
require("highcharter")
load(file = "ems_city_group_data.rda")
load(file = choose.files())
enc2native(city_group_count$city2) ## 變成<U+00BC><ea><U+00B4><f2><U+00BF><U+00A4>
Encoding(city_group_count$city2) <- "CP950" ## 轉成正常中文
city_group_count$city2 <- iconv(city_group_count$city2,"CP950","UTF-8")
ui <- fluidPage(
navbarPage( "EMS Project",
tabPanel("city-case histogram",
wellPanel(
highchartOutput("hcontainer1",height = "500px")
)
),
tabPanel("year-case histogram",
wellPanel(
highchartOutput("hcontainer2",height = "500px")
)
)
)
)
require("dplyr")
l1 <- city_group_count %>% filter(yy==2007)
l2 <- city_group_count %>% filter(yy==2008)
l3 <- city_group_count %>% filter(yy==2009)
l4 <- city_group_count %>% filter(yy==2010)
l5 <- city_group_count %>% filter(yy==2011)
l6 <- city_group_count %>% filter(yy==2012)
l7 <- city_group_count %>% filter(yy==2013)
citylist <- levels(as.factor(city_group_count$city2))
citylist
citylist[16]
y$q
require("tidyr")
y <- city_group_count %>% spread(.,city2,count)
colnames(y) <- rep(letters,1,length(names(y)))
y$q
runApp('C:/Github/ems_case')
citylist[1]:citylist[length(citylist)]
hc_xAxis( categories = citylist) %>%
length(citylist)
c(citylist[1]:citylist[length(citylist)])
c(citylist[1],citylist[2])
c(citylist[1]:citylist[2])
citylist[1]:citylist[2]
letters
letters[1]:letters[3]
letters[1],letters[3]
c(letters[1],letters[3])
rep(citylist,1,length(citylist))
l1
citylist
citylist[1]
city_group_count
y
colnames(city_group_count %>% spread(.,city2,count))
citylist2 <- colnames(y)[-1]
y <- city_group_count %>% spread(.,city2,count)
citylist2 <- colnames(y)[-1]
colnames(y) <- rep(letters,1,length(names(y)))
identical(citylist2,citylist)
Encoding(citylist)
Encoding(citylist2)
runApp('C:/Github/ems_case')
y$b
y$c
y <- city_group_count %>% spread(.,city2,count)
y
y <- city_group_count %>% spread(.,city2,count,fill=0)
y
runApp('C:/Github/ems_case')
l1
y
l7$count
y[7,]
class(y[7,])
unlist(y[7,])
as.list(y[7,])
as.vector(y[7,])
class(as.vector(y[7,]))
y[7,,drop=TRUE]
y[7,drop=TRUE]
summary(y)
str(y)
colnames(y) <- rep(letters,1,length(names(y)))
str(y)
y
y[7,]
y[[7]]
y[[7],]
y[[7,]]
y[[7]]
y
y$g
y[[,7]]
y[,[7]]
y[[]][7]
y[[7]
]
y$g
y[7,]
y[7,]$g
y[7,][1]
cols<-c("column1", "Column2", "Column3")
df1<-data.frame(matrix(ncol = 3, nrow = 1))
colnames(df1)<-cols
df1
result<-list()
result['df1']<-list(df1)
result
result[[df1]]
result[['df1']]
result['df1']
result[['df1']]
y
y[7,]
y[7,-1]
class(y[7,-1])
list(y[7,-1])
as.list(y[7,-1])
as.list(y[[7,-1]])
as.list(y[7,-1])
list(y[7,-1])
y
runApp('C:/Github/ems_case')
runApp('C:/Github/ems_case')
split(y[7,])
split(y[7,],xx)
split(y[7,],yrlist[7])
yrlist <- paste0(levels(as.factor(city_group_count$yy)),"yr")
Encoding(yrlist) <- "CP950" ## 轉成正常中文
yrlist <- iconv(yrlist,"CP950","UTF-8")
split(y[7,],yrlist[7])
iris
iris[1,]
as.numeric(y[7,])
y[7,]
as.numeric(y[7,-1])
runApp('C:/Github/ems_case')
y
tapply(y,1,sum)
tapply(y,1,sum())
tapply(y,colnames(y),sum())
tapply(y,colnames(y),sum
)
n <- 17; fac <- factor(rep(1:3, length = n), levels = 1:5)
table(fac)
tapply(1:n, fac, sum)
ind <- list(c(1, 2, 2), c("A", "A", "B"))
table(ind)
dplyr::summarise_each(y, funs(sum))
y %>% summarise_each(.,sum)
y %>% summarise_each(.,sum())
summarise_each(y,funs(mean))
summarise_each(y,funs(sum()))
summarise_each(y,funs(sum)
)
y
sum(y$b)
summarise_each(y,funs(sum)
)
summarise_each(y[,-1],funs(sum())
)
lapply(y[,-1],sum)
sapply(y[,-1],sum)
runApp('C:/Github/ems_case')
cars
cars[3,]
as.numeric(cars[3,])
as.character(y[7,])
y[7,]
as.factor(y[7,])
list(y[7,])
iris
iris[1,]
as.numeric(iris[1,])
as.factor(iris[1,])
list(iris[1,])
as.list(iris[1,])
as.list(iris[1,],drop=TRUE)
as.character(iris[1,])
city_group_count
as.character(city_group_count[1,])
as.character(city_group_count[,2])
y[,2]
city_group_count[,2]
city_group_count[1,2]
city_group_count$yy
yrlist
summary(yrlist)
str(yrlist)
citylist2
runApp('C:/Github/ems_case')
runApp('C:/Github/ems_case')
